// This file is part of libPerm. Use of this source code is
// governed by a BSD-style license that can be found in the
// LICENSE file at the root of the libPerm source tree or at
// <https://github.com/Krzmbrzl/libPerm/blob/develop/LICENSE>.

#ifndef LIBPERM_SPECIALGROUPS_HPP_
#define LIBPERM_SPECIALGROUPS_HPP_

#include "libperm/Cycle.hpp"
#include "libperm/ExplicitPermutation.hpp"
#include "libperm/PrimitivePermutationGroup.hpp"

#include <numeric>
#include <vector>

namespace perm {

/**
 * @param n The amount of elements the generated group shall act on
 * @returns The symmetric group over n elements
 *
 * @tparam Group The type of the group object that is to be generated
 * @tparam Perm The type of the permutation object that is used for the generators
 */
template< typename Group = PrimitivePermutationGroup, typename Perm = ExplicitPermutation > Group Sym(unsigned int n) {
	if (n == 0 || n == 1) {
		return Group{};
	}

	// The symmetric group over n elements can be generated by the cycle (0 1 2 ... n-1)
	// and the cycle (0 1)

	std::vector< Cycle::value_type > cycle(n);
	std::iota(cycle.begin(), cycle.end(), 0);

	Perm generator1(Cycle(std::move(cycle)));
	Perm generator2(Cycle({ 0, 1 }));

	return Group({ generator1, generator2 });
}

} // namespace perm

#endif // LIBPERM_SPECIALGROUPS_HPP_
